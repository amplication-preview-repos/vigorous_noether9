/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Investor } from "./Investor";
import { InvestorCountArgs } from "./InvestorCountArgs";
import { InvestorFindManyArgs } from "./InvestorFindManyArgs";
import { InvestorFindUniqueArgs } from "./InvestorFindUniqueArgs";
import { CreateInvestorArgs } from "./CreateInvestorArgs";
import { UpdateInvestorArgs } from "./UpdateInvestorArgs";
import { DeleteInvestorArgs } from "./DeleteInvestorArgs";
import { InvestorService } from "../investor.service";
@graphql.Resolver(() => Investor)
export class InvestorResolverBase {
  constructor(protected readonly service: InvestorService) {}

  async _investorsMeta(
    @graphql.Args() args: InvestorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Investor])
  async investors(
    @graphql.Args() args: InvestorFindManyArgs
  ): Promise<Investor[]> {
    return this.service.investors(args);
  }

  @graphql.Query(() => Investor, { nullable: true })
  async investor(
    @graphql.Args() args: InvestorFindUniqueArgs
  ): Promise<Investor | null> {
    const result = await this.service.investor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Investor)
  async createInvestor(
    @graphql.Args() args: CreateInvestorArgs
  ): Promise<Investor> {
    return await this.service.createInvestor({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Investor)
  async updateInvestor(
    @graphql.Args() args: UpdateInvestorArgs
  ): Promise<Investor | null> {
    try {
      return await this.service.updateInvestor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Investor)
  async deleteInvestor(
    @graphql.Args() args: DeleteInvestorArgs
  ): Promise<Investor | null> {
    try {
      return await this.service.deleteInvestor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
